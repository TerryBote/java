{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "619449dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Which text file do you want to use for the puzzle?test_3.txt\n",
      "The Sirs are: Andrew Bill Hilary Nancy\n",
      "There is a unique solution:\n",
      "Sir Andrew is a Knave.\n",
      "Sir Bill is a Knight.\n",
      "Sir Hilary is a Knave.\n",
      "Sir Nancy is a Knight.\n"
     ]
    }
   ],
   "source": [
    "###########新改的一版19:12\n",
    "import re\n",
    "import itertools\n",
    "from os.path import exists\n",
    "\n",
    "file_name = input('Which text file do you want to use for the puzzle?').removesuffix('\\n')\n",
    "if not exists(file_name):\n",
    "    print('Incorrect input, giving up.')\n",
    "    sys.exit()\n",
    "#从文件中提取句子\n",
    "def extract_sentences_from_file(file_name):\n",
    "    with open(file_name, 'r') as file:\n",
    "        content = file.read()\n",
    "        sentences = re.split(r'(?<=[.!?])\\s+', content)\n",
    "        return sentences\n",
    "\n",
    "target_word_sir = 'Sir'\n",
    "target_word_sirs = 'Sirs'\n",
    "all_names = []\n",
    "def find_name_after_sir(target_word_sir, capitalized_words_in_this_sentence):\n",
    "    names_after_sir = []\n",
    "    for i in range(len(capitalized_words_in_this_sentence)-1):\n",
    "        if capitalized_words_in_this_sentence[i] == target_word_sir:\n",
    "            names_after_sir.append(capitalized_words_in_this_sentence[i + 1])\n",
    "    return names_after_sir\n",
    "def find_name_after_sirs(target_word_sirs, capitalized_words_in_this_sentence):\n",
    "    names_after_sirs = []\n",
    "    for i in range(len(capitalized_words_in_this_sentence)-1):\n",
    "        if capitalized_words_in_this_sentence[i] == target_word_sirs:\n",
    "            names_after_sirs.extend(capitalized_words_in_this_sentence[i + 1:])\n",
    "    return names_after_sirs\n",
    "\n",
    "sentences = extract_sentences_from_file(file_name)\n",
    "capitalized_words_per_sentence = []\n",
    "\n",
    "for sentence in sentences:\n",
    "    if not sentence.isspace():\n",
    "        words = sentence.split()\n",
    "        capitalized_words_in_this_sentence = []\n",
    "        for word in words:\n",
    "            cleaned_word = word.strip(',.!\"')     \n",
    "            if cleaned_word.istitle():\n",
    "                capitalized_words_in_this_sentence.append(cleaned_word)\n",
    "                \n",
    "        capitalized_words_per_sentence.append(capitalized_words_in_this_sentence)\n",
    "        all_names.extend(find_name_after_sir(target_word_sir, capitalized_words_in_this_sentence))\n",
    "        all_names.extend(find_name_after_sirs(target_word_sirs, capitalized_words_in_this_sentence))\n",
    "        all_names=list(set(all_names))\n",
    "        all_names_sorted = sorted(all_names)\n",
    "        all_names_in_puzzle=' '.join(all_names_sorted)\n",
    "        all_names_count=all_names_in_puzzle.split()\n",
    "        all_names_count_list=list(all_names_count)\n",
    "        count=len(all_names_count)  ###文中出现的所有人名的个数\n",
    "\n",
    "if len(all_names_sorted)==1:\n",
    "    print(f'The Sir is: {all_names_in_puzzle}')\n",
    "if len(all_names_sorted)!=1:\n",
    "    print(f'The Sirs are: {all_names_in_puzzle}')\n",
    "with open(file_name, 'r') as file:\n",
    "    content = file.read()\n",
    "    content=content.replace('\\n',' ')\n",
    "\n",
    "def split_sentences(content):\n",
    "    sentence_pattern= r'([A-Z][^.!?]*[.!?])'\n",
    "    matches = re.findall(sentence_pattern,content)\n",
    "    sentences = [match.strip() for match in matches]\n",
    "    return sentences\n",
    "sentences = split_sentences(content)\n",
    "infos=[]\n",
    "for sentence in sentences:\n",
    "    pattern_info1 = r'([A-Z][^.!?]*[A-Z][a-z]*),\\\" .*? Sir ([A-Z][a-z]+)[\\.!?]'\n",
    "    matches1 = re.findall(pattern_info1, sentence)\n",
    "    pattern_info2 = r'Sir ([A-Z][a-z]+)[^.!?]*: \\\"([a-z]*[^.!?]*[A-Z][a-z]*),\\\"[a-z]*[^.!?]*[\\.!?]'\n",
    "    matches2 = re.findall(pattern_info2, sentence)\n",
    "    pattern_info3 = r'Sir ([A-Z][a-z]+)[^.!?]*: \\\"([a-z]*[^.!?]*[A-Z][a-z]*)[\\.!?]'\n",
    "    matches3 = re.findall(pattern_info3, sentence)\n",
    "    for match in matches1:#1\\2\n",
    "        speaker1 = match[1]# 说话者\n",
    "        statement=match[0]\n",
    "        infos.append((speaker1, statement)) \n",
    "    for match in matches2:#3/5\n",
    "        speaker2 = match[0]  # 说话者\n",
    "        statement =match[1]\n",
    "        infos.append((speaker2, statement)) \n",
    "    for match in matches3:#4\\6\n",
    "        speaker3 = match[0]  # 说话者\n",
    "        statement=match[1]\n",
    "        infos.append((speaker3, statement)) \n",
    "#print(\"infos:\",infos)\n",
    "#print(\"all_names_count_list:\",all_names_count_list)#全局变量\n",
    "\n",
    "\n",
    "def is_true(info,assignment):\n",
    "    speaker,claim = info\n",
    "    speaker_role = assignment[speaker]\n",
    "    all_names_count_list\n",
    "    subject = re.sub(r'(Sir )|( is a K[nave|night])', '', claim)\n",
    "\n",
    "    ##这个大类是：\"am\"——只有一种句型：\"I am a Knight/Knave\"\n",
    "    if ' am ' in claim:\n",
    "        if 'a Knave' in claim:\n",
    "            return False\n",
    "        elif 'a Knight' in claim:\n",
    "            return speaker_role in ['Knight', 'Knave']\n",
    "    if ' is ' in claim:  \n",
    "        \n",
    "        if not ' or 'in claim and not ' least 'in claim and not 'most ' in claim and not ' exactly ' in claim:           \n",
    "            if \"is a Knight\" in claim:       \n",
    "                if speaker_role == 'Knight':\n",
    "                    return assignment.get(subject) == \"Knight\" \n",
    "                elif speaker_role == 'Knave':\n",
    "                    return assignment.get(subject) != \"Knight\"     \n",
    "            elif \"is a Knave\" in claim:\n",
    "                if speaker_role == 'Knight':\n",
    "                    return assignment.get(subject) == \"Knave\" \n",
    "                elif speaker_role == 'Knave':\n",
    "                    return assignment.get(subject) != \"Knave\"\n",
    "        \n",
    "        ####\"or\"\n",
    "        if ' or ' in claim:\n",
    "                names_part = claim.split(\" is a \")[0].strip()\n",
    "                last_name = names_part.split(\" or \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" or {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if 'I'in claim:\n",
    "                    if \"is a Knight\" in claim:#xxx,xxx,xxx or i is knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return True\n",
    "                        else: \n",
    "                            return all(assignment.get(name) == \"Knave\" for name in names)\n",
    "                    else:#xxx,xxx,xxx or i is knave\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(name) == \"Knave\" for name in names)\n",
    "                        else:\n",
    "                            return False\n",
    "                else:\n",
    "                    if \"is a Knight\" in claim:#xxx,xxx,xxx or xxx is knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(sir) == \"Knight\" for sir in names)\n",
    "                        else: \n",
    "                            return all(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                    elif \"is a Knave\" in claim:\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knight\" for sir in names) \n",
    "        ##这个大类是：\"at least\"\n",
    "        if ' least ' in claim:\n",
    "            if  ' us ' in claim:\n",
    "                if \"is a Knight\" in claim:#at least one of us is a Knight\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return True    \n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return all(assignment.get(name) == \"Knave\" for name in all_names_count_list)\n",
    "                elif \"is a Knave\" in claim:#at least one of us is a Knave\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return any(assignment.get(sir) == \"Knave\" for sir in all_names_count_list)\n",
    "                    else:\n",
    "                        return False\n",
    "\n",
    "            elif ' and ' in claim:#'at least one of Sir Hilary and I is a Knave'\n",
    "                match = re.compile(r'(?i)at least one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if 'I' in claim:\n",
    "                    if \"is a Knight\" in claim:#at least xxx,xxx,and I is a knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return True\n",
    "                        elif speaker_role == 'Knave':\n",
    "                            return all(assignment.get(name) == \"Knave\" for name in names)\n",
    "                    elif \"is a Knave\" in claim:\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(name) == \"Knave\" for name in names if name !=speaker)\n",
    "                        elif speaker_role == 'Knave':\n",
    "                            return False\n",
    "                else:\n",
    "                    if \"is a Knight\" in claim:#at least xxx,xxx,and xxx is a knight\n",
    "                        knight_count = sum(1 for name in names if assignment.get(name) == 'Knight')\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return knight_count>=1\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                    elif \"is a Knave\" in claim:#at least xxx,xxx,and xxx is a knave\n",
    "                        knave_count = sum(1 for name in names if assignment.get(name) == 'Knave')\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return knave_count>=1\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knight\" for sir in names)\n",
    "        ##这个大类是：\"at most\"    \n",
    "        if ' most ' in claim:\n",
    "            if  ' us ' in claim:##at most one of us 这一部分没问题不用看了！！！！！！！！！！\n",
    "                if \"is a Knight\" in claim:###at most one of us is a Knight\n",
    "                    knight_count = sum(1 for name in all_names_count_list if assignment.get(name) == 'Knight')\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count==1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knight_count >1\n",
    "                elif \"is a Knave\" in claim:###at most one of us is a Knave\n",
    "                    knave_count = sum(1 for name in all_names_count_list if assignment.get(name) == 'Knave')\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count <= 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knave_count >1                        \n",
    "\n",
    "            elif ' and ' in claim:             \n",
    "\n",
    "                match = re.compile(r'(?i)at most one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]   \n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if \"is a Knight\" in claim:#at most one of xxx xxx and i is a knight\n",
    "                    knight_count = sum(1 for name in names if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knight_count > 1\n",
    "                elif \"is a Knave\" in claim:\n",
    "                    knave_count = sum(1 for name in names if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count <= 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knave_count > 1\n",
    "\n",
    "        ##这个大类是：\"exactly\"    \n",
    "        if ' exactly ' or ' Exactly 'in claim:\n",
    "            if  ' us ' in claim: \n",
    "                if \"is a Knight\" in claim:\n",
    "                    knight_count=sum(1 for name in all_names_count_list if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knight_count != 1\n",
    "                elif \"is a Knave\" in claim:\n",
    "                    knave_count=sum(1 for name in all_names_count_list if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knave_count != 1\n",
    "\n",
    "            elif ' and ' in claim:         \n",
    "                match = re.compile(r'(?i)exactly one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]  \n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if \"is a Knight\" in claim:\n",
    "                    knight_count=sum(1 for name in names if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knight_count != 1\n",
    "                else:\n",
    "                    knave_count=sum(1 for name in names if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knave_count != 1\n",
    "       \n",
    "\n",
    "\n",
    "    ##这个大类是：\"are\"    \n",
    "    \n",
    "    elif ' are ' in claim:\n",
    "        if 'all of 'in claim or 'All of ' in claim:#句型一：\"All/all of us are\n",
    "            if 'Knights' in claim:\n",
    "                if speaker_role == 'Knight':#All/all of us are Knights\n",
    "                    return all(assignment.get(name) == \"Knight\" for name in all_names_count_list)\n",
    "                elif speaker_role == 'Knave':\n",
    "                    return True  \n",
    "            elif 'Knaves' in claim:\n",
    "                if speaker_role == 'Knight':#All/all of us are Knaves\n",
    "                    return False #speaker是骑士 不可能说all of us are Knaves\n",
    "                elif speaker_role == 'Knave':\n",
    "                    return not all(assignment.get(name) == \"Knave\" for name in all_names_count_list if name !=speaker)\n",
    "        elif 'and ' in claim:#句型二：XXX,XXX and XXX/I are\"\n",
    "            names_part = claim.split(\" are \")[0].strip()\n",
    "            last_name = names_part.split(\" and \")[-1].strip()\n",
    "            if last_name == \"I\":\n",
    "                new_last_name=\"Sir \"+speaker\n",
    "            else:\n",
    "                new_last_name=last_name\n",
    "            names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "            names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "            names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "            if 'and I'in claim:#如果句子里提到了\"I\"\n",
    "                if 'Knights' in claim:###XXX,XXX and I are Knights\n",
    "                    if speaker_role == 'Knight':\n",
    "                        # 如果说话者是骑士，我们期望每个人都是骑士，因为骑士不会撒谎。\n",
    "                        return all(assignment.get(name) == \"Knight\" for name in names)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return True \n",
    "                else:#SirXXX,Sir XXX and I are knaves\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return False\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return any(assignment.get(name) == 'Knight' for name in names if name !=speaker)\n",
    "            else:#句子里没有提到I\n",
    "                if 'Knights' in claim:###XXX,XXX and XXX are Knights\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return all(assignment.get(name) == \"Knight\" for name in names)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return not all(assignment.get(name) == \"Knight\" for name in names if name !=speaker) \n",
    "                else:#SirXXX,Sir XXX and Sir XXX are knaves\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return all(assignment.get(name) == \"Knave\" for name in names if name !=speaker)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return not all(assignment.get(name) == \"Knave\" for name in names if name !=speaker)  \n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "def backtrack(assignment, infos, solutions,all_names_count_list):\n",
    "    # 如果所有居民都分配了身份，检查当前的身份分配是否使所有陈述都成立\n",
    "\n",
    "    if len(assignment) == len(all_names_count_list):\n",
    "        # If all statements are true with this assignment, then it's a valid solution\n",
    "        if all(is_true(info, assignment) for info in infos):\n",
    "        \n",
    "            solutions.add(frozenset(assignment.items()))  # We use a frozenset because regular sets are unhashable\n",
    "        return\n",
    "    \n",
    "    for person in all_names_count_list:\n",
    "        if person not in assignment:\n",
    "            for role in ['Knight', 'Knave']:\n",
    "                assignment = assignment.copy()\n",
    "                assignment[person] = role\n",
    "                backtrack(assignment, infos, solutions, all_names_count_list) \n",
    "            break\n",
    "\n",
    "def solve_puzzle(infos, all_names_count_list):\n",
    "    assignment = {}  # 初始分配为空\n",
    "    solutions = set()  # 用于存储找到的所有解决方案\n",
    "\n",
    "    backtrack(assignment, infos, solutions, all_names_count_list)\n",
    "\n",
    "    if not solutions:\n",
    "        print(\"没有找到解决方案。\")\n",
    "        return None\n",
    "\n",
    "    # 将解决方案转换为列表形式，便于进一步处理\n",
    "    solutions_list = [dict(solution) for solution in solutions]\n",
    "\n",
    "    # 如果只有一个解决方案，直接返回\n",
    "    if len(solutions_list) == 1:\n",
    "        print(\"找到唯一解决方案。\")\n",
    "        return solutions_list[0]  # 返回唯一的解决方案\n",
    "\n",
    "    # 对于多个解决方案，找出所有解决方案中的共同点\n",
    "    common_elements = set.intersection(*map(set, map(dict.items, solutions_list)))\n",
    "\n",
    "    if common_elements:\n",
    "        # 如果存在共同点，我们可以创建一个包含这些共同元素的新解决方案\n",
    "        common_solution = dict(common_elements)\n",
    "        \n",
    "        print(\"找到以下共同点：\")\n",
    "        for person, role in common_solution.items():\n",
    "            print(f\"{person} is {role}\")\n",
    "\n",
    "        # 可以选择返回包含所有共同元素的解决方案\n",
    "        return common_solution\n",
    "    else:\n",
    "        # 如果没有共同点，可以选择打印所有的解决方案或执行其他操作\n",
    "        print(\"找到多个解决方案，但没有共同点。以下是所有解决方案：\")\n",
    "        for i, solution in enumerate(solutions_list, 1):\n",
    "            print(f\"解决方案 {i}:\")\n",
    "            for person, role in solution.items():\n",
    "                print(f\"{person} is {role}\")\n",
    "\n",
    "        # 在这种情况下，你可以根据需求返回解决方案列表或None\n",
    "        return solutions_list \n",
    "    \n",
    "solutions=set()\n",
    "assignment = {}\n",
    "\n",
    "backtrack(assignment, infos, solutions, all_names_count_list)\n",
    "solutions_list=[]\n",
    "if solutions:\n",
    "    #print('solutions:',solutions)\n",
    "    for solution in solutions:\n",
    "        solutions_list.append(dict(solution))\n",
    "    solutions_count=len(solutions_list)##最终结果的个数\n",
    "    if solutions_count>1:\n",
    "        print('There are',solutions_count,'solutions.')\n",
    "       \n",
    "    if solutions_count==1:\n",
    "        descriptive_sentences = []\n",
    "        for solution in solutions_list:\n",
    "            temp_list=[]\n",
    "    # 遍历解决方案字典中的每个条目\n",
    "    \n",
    "            for name, role in solution.items():\n",
    "                sentence = f\"Sir {name} is a {role}.\"\n",
    "                temp_list.append((name, sentence))\n",
    "                \n",
    "            sorted_sentences = sorted(temp_list, key=lambda x: x[0])\n",
    "            for _, sentence in sorted_sentences:\n",
    "                descriptive_sentences.append(sentence)\n",
    "\n",
    "        print(\"There is a unique solution:\")\n",
    "        for sentence in descriptive_sentences:\n",
    "            print(sentence)\n",
    "else:\n",
    "    print(\"There is no solution.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65c4d484",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 2 solutions.\n"
     ]
    }
   ],
   "source": [
    "def is_true(info,assignment):\n",
    "    speaker,claim = info\n",
    "    speaker_role = assignment[speaker]\n",
    "    all_names_count_list\n",
    "    subject = re.sub(r'(Sir )|( is a K[nave|night])', '', claim)\n",
    "\n",
    "    ##这个大类是：\"am\"——只有一种句型：\"I am a Knight/Knave\"\n",
    "    if ' am ' in claim:\n",
    "        if 'a Knave' in claim:\n",
    "            return False\n",
    "        elif 'a Knight' in claim:\n",
    "            return speaker_role in ['Knight', 'Knave']\n",
    "    if ' is ' in claim:  \n",
    "        \n",
    "        if not ' or 'in claim and not ' least 'in claim and not 'most ' in claim and not ' exactly ' in claim:           \n",
    "            if \"is a Knight\" in claim:       \n",
    "                if speaker_role == 'Knight':\n",
    "                    return assignment.get(subject) == \"Knight\" \n",
    "                elif speaker_role == 'Knave':\n",
    "                    return assignment.get(subject) != \"Knight\"     \n",
    "            elif \"is a Knave\" in claim:\n",
    "                if speaker_role == 'Knight':\n",
    "                    return assignment.get(subject) == \"Knave\" \n",
    "                elif speaker_role == 'Knave':\n",
    "                    return assignment.get(subject) != \"Knave\"\n",
    "        \n",
    "        ####\"or\"\n",
    "        if ' or ' in claim:\n",
    "                names_part = claim.split(\" is a \")[0].strip()\n",
    "                last_name = names_part.split(\" or \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" or {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if 'I'in claim:\n",
    "                    if \"is a Knight\" in claim:#xxx,xxx,xxx or i is knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return True\n",
    "                        else: \n",
    "                            return all(assignment.get(name) == \"Knave\" for name in names)\n",
    "                    else:#xxx,xxx,xxx or i is knave\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(name) == \"Knave\" for name in names)\n",
    "                        else:\n",
    "                            return False\n",
    "                else:\n",
    "                    if \"is a Knight\" in claim:#xxx,xxx,xxx or xxx is knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(sir) == \"Knight\" for sir in names)\n",
    "                        else: \n",
    "                            return all(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                    elif \"is a Knave\" in claim:\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knight\" for sir in names) \n",
    "        ##这个大类是：\"at least\"\n",
    "        if ' least ' in claim:\n",
    "            if  ' us ' in claim:\n",
    "                if \"is a Knight\" in claim:#at least one of us is a Knight\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return True    \n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return all(assignment.get(name) == \"Knave\" for name in all_names_count_list)\n",
    "                elif \"is a Knave\" in claim:#at least one of us is a Knave\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return any(assignment.get(sir) == \"Knave\" for sir in all_names_count_list)\n",
    "                    else:\n",
    "                        return False\n",
    "\n",
    "            elif ' and ' in claim:#'at least one of Sir Hilary and I is a Knave'\n",
    "                match = re.compile(r'(?i)at least one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if 'I' in claim:\n",
    "                    if \"is a Knight\" in claim:#at least xxx,xxx,and I is a knight\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return True\n",
    "                        elif speaker_role == 'Knave':\n",
    "                            return all(assignment.get(name) == \"Knave\" for name in names)\n",
    "                    elif \"is a Knave\" in claim:\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return any(assignment.get(name) == \"Knave\" for name in names if name !=speaker)\n",
    "                        elif speaker_role == 'Knave':\n",
    "                            return False\n",
    "                else:\n",
    "                    if \"is a Knight\" in claim:#at least xxx,xxx,and xxx is a knight\n",
    "                        knight_count = sum(1 for name in names if assignment.get(name) == 'Knight')\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return knight_count>=1\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knave\" for sir in names)\n",
    "                    elif \"is a Knave\" in claim:#at least xxx,xxx,and xxx is a knave\n",
    "                        knave_count = sum(1 for name in names if assignment.get(name) == 'Knave')\n",
    "                        if speaker_role == 'Knight':\n",
    "                            return knave_count>=1\n",
    "                        else:\n",
    "                            return all(assignment.get(sir) == \"Knight\" for sir in names)\n",
    "        ##这个大类是：\"at most\"    \n",
    "        if ' most ' in claim:\n",
    "            if  ' us ' in claim:##at most one of us 这一部分没问题不用看了！！！！！！！！！！\n",
    "                if \"is a Knight\" in claim:\n",
    "                    knight_count = sum(1 for name in all_names_count_list if assignment.get(name) == 'Knight')\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count==1\n",
    "                    else:\n",
    "                        return knight_count!=1\n",
    "                elif \"is a Knave\" in claim:\n",
    "                    knave_count = sum(1 for name in all_names_count_list if assignment.get(name) == 'Knave')\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count <= 1\n",
    "                    else:\n",
    "                        return knave_count >1                        \n",
    "\n",
    "            elif ' and ' in claim:             \n",
    "\n",
    "                match = re.compile(r'(?i)at most one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]   \n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if \"is a Knight\" in claim:#at most one of xxx xxx and i is a knight\n",
    "                    knight_count = sum(1 for name in names if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    else:\n",
    "                        return knight_count > 1\n",
    "                elif \"is a Knave\" in claim:\n",
    "                    knave_count = sum(1 for name in names if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count <= 1\n",
    "                    else:\n",
    "                        return knave_count > 1\n",
    "\n",
    "        ##这个大类是：\"exactly\"    \n",
    "        if ' exactly ' or ' Exactly 'in claim:\n",
    "            if  ' us ' in claim: \n",
    "                if \"is a Knight\" in claim:\n",
    "                    knight_count=sum(1 for name in all_names_count_list if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knight_count != 1\n",
    "                elif \"is a Knave\" in claim:\n",
    "                    knave_count=sum(1 for name in all_names_count_list if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count == 1\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return knave_count != 1\n",
    "\n",
    "            elif ' and ' in claim:         \n",
    "                match = re.compile(r'(?i)exactly one of ')  # (?i)使匹配变为不区分大小写\n",
    "                names_part = match.split(claim)[1].split(' is ')[0].strip() if match.split(claim)[1:] else None\n",
    "                last_name = names_part.split(\" and \")[-1].strip()\n",
    "                if last_name == \"I\":\n",
    "                    new_last_name=\"Sir \"+speaker\n",
    "                else:\n",
    "                    new_last_name=last_name\n",
    "                names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "                names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]  \n",
    "                names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "\n",
    "                if \"is a Knight\" in claim:\n",
    "                    knight_count=sum(1 for name in names if assignment.get(name) == \"Knight\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knight_count == 1\n",
    "                    else:\n",
    "                        return knight_count != 1\n",
    "                else:\n",
    "                    knave_count=sum(1 for name in names if assignment.get(name) == \"Knave\")\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return knave_count == 1\n",
    "                    else:\n",
    "                        return knave_count != 1\n",
    "       \n",
    "\n",
    "\n",
    "    ##这个大类是：\"are\"    \n",
    "    \n",
    "    elif ' are ' in claim:\n",
    "        if 'all of 'in claim or 'All of ' in claim:#句型一：\"All/all of us are\n",
    "            if 'Knights' in claim:\n",
    "                if speaker_role == 'Knight':#All/all of us are Knights\n",
    "                    return all(assignment.get(name) == \"Knight\" for name in all_names_count_list)\n",
    "                elif speaker_role == 'Knave':\n",
    "                    return True  \n",
    "            elif 'Knaves' in claim:\n",
    "                if speaker_role == 'Knight':#All/all of us are Knaves\n",
    "                    return False #speaker是骑士 不可能说all of us are Knaves\n",
    "                elif speaker_role == 'Knave':\n",
    "                    return not all(assignment.get(name) == \"Knave\" for name in all_names_count_list if name !=speaker)\n",
    "        elif 'and ' in claim:#句型二：XXX,XXX and XXX/I are\"\n",
    "            names_part = claim.split(\" are \")[0].strip()\n",
    "            last_name = names_part.split(\" and \")[-1].strip()\n",
    "            if last_name == \"I\":\n",
    "                new_last_name=\"Sir \"+speaker\n",
    "            else:\n",
    "                new_last_name=last_name\n",
    "            names_part = names_part.replace(f\" and {last_name}\", \"\").strip()\n",
    "            names = [name.strip() for name in names_part.split(\", \")] + [new_last_name]\n",
    "            names = [name.replace('Sir ', '').strip() if 'Sir ' in name else name.strip() for name in names]\n",
    "            if 'and I'in claim:#如果句子里提到了\"I\"\n",
    "                if 'Knights' in claim:###XXX,XXX and I are Knights\n",
    "                    if speaker_role == 'Knight':\n",
    "                        # 如果说话者是骑士，我们期望每个人都是骑士，因为骑士不会撒谎。\n",
    "                        return all(assignment.get(name) == \"Knight\" for name in names)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return True \n",
    "                else:#SirXXX,Sir XXX and I are knaves\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return False\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return any(assignment.get(name) == 'Knight' for name in names if name !=speaker)\n",
    "            else:#句子里没有提到I\n",
    "                if 'Knights' in claim:###XXX,XXX and XXX are Knights\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return all(assignment.get(name) == \"Knight\" for name in names)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return not all(assignment.get(name) == \"Knight\" for name in names if name !=speaker) \n",
    "                else:#SirXXX,Sir XXX and Sir XXX are knaves\n",
    "                    if speaker_role == 'Knight':\n",
    "                        return all(assignment.get(name) == \"Knave\" for name in names if name !=speaker)\n",
    "                    elif speaker_role == 'Knave':\n",
    "                        return not all(assignment.get(name) == \"Knave\" for name in names if name !=speaker)  \n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "def backtrack(assignment, infos, solutions,all_names_count_list):\n",
    "    # 如果所有居民都分配了身份，检查当前的身份分配是否使所有陈述都成立\n",
    "\n",
    "    if len(assignment) == len(all_names_count_list):\n",
    "        # If all statements are true with this assignment, then it's a valid solution\n",
    "        if all(is_true(info, assignment) for info in infos):\n",
    "        \n",
    "            solutions.add(frozenset(assignment.items()))  # We use a frozenset because regular sets are unhashable\n",
    "        return\n",
    "    \n",
    "    for person in all_names_count_list:\n",
    "        if person not in assignment:\n",
    "            for role in ['Knight', 'Knave']:\n",
    "                assignment = assignment.copy()\n",
    "                assignment[person] = role\n",
    "                backtrack(assignment, infos, solutions, all_names_count_list) \n",
    "            break\n",
    "\n",
    "def solve_puzzle(infos, all_names_count_list):\n",
    "    assignment = {}  # 初始分配为空\n",
    "    solutions = set()  # 用于存储找到的所有解决方案\n",
    "\n",
    "    backtrack(assignment, infos, solutions, all_names_count_list)\n",
    "\n",
    "    if not solutions:\n",
    "        print(\"没有找到解决方案。\")\n",
    "        return None\n",
    "\n",
    "    # 将解决方案转换为列表形式，便于进一步处理\n",
    "    solutions_list = [dict(solution) for solution in solutions]\n",
    "\n",
    "    # 如果只有一个解决方案，直接返回\n",
    "    if len(solutions_list) == 1:\n",
    "        print(\"找到唯一解决方案。\")\n",
    "        return solutions_list[0]  # 返回唯一的解决方案\n",
    "\n",
    "    # 对于多个解决方案，找出所有解决方案中的共同点\n",
    "    common_elements = set.intersection(*map(set, map(dict.items, solutions_list)))\n",
    "\n",
    "    if common_elements:\n",
    "        # 如果存在共同点，我们可以创建一个包含这些共同元素的新解决方案\n",
    "        common_solution = dict(common_elements)\n",
    "        \n",
    "        print(\"找到以下共同点：\")\n",
    "        for person, role in common_solution.items():\n",
    "            print(f\"{person} is {role}\")\n",
    "\n",
    "        # 可以选择返回包含所有共同元素的解决方案\n",
    "        return common_solution\n",
    "    else:\n",
    "        # 如果没有共同点，可以选择打印所有的解决方案或执行其他操作\n",
    "        print(\"找到多个解决方案，但没有共同点。以下是所有解决方案：\")\n",
    "        for i, solution in enumerate(solutions_list, 1):\n",
    "            print(f\"解决方案 {i}:\")\n",
    "            for person, role in solution.items():\n",
    "                print(f\"{person} is {role}\")\n",
    "\n",
    "        # 在这种情况下，你可以根据需求返回解决方案列表或None\n",
    "        return solutions_list \n",
    "    \n",
    "solutions=set()\n",
    "assignment = {}\n",
    "infos=[('Richard','Sir Harry is a Knave')]\n",
    "all_names_count_list=['Richard',' Harry']\n",
    "backtrack(assignment, infos, solutions, all_names_count_list)\n",
    "solutions_list=[]\n",
    "if solutions:\n",
    "    #print('solutions:',solutions)\n",
    "    for solution in solutions:\n",
    "        solutions_list.append(dict(solution))\n",
    "    solutions_count=len(solutions_list)##最终结果的个数\n",
    "    if solutions_count>1:\n",
    "        print('There are',solutions_count,'solutions.')\n",
    "       \n",
    "    if solutions_count==1:\n",
    "        descriptive_sentences = []\n",
    "        for solution in solutions_list:\n",
    "            temp_list=[]\n",
    "    # 遍历解决方案字典中的每个条目\n",
    "    \n",
    "            for name, role in solution.items():\n",
    "                sentence = f\"Sir {name} is a {role}.\"\n",
    "                temp_list.append((name, sentence))\n",
    "                \n",
    "            sorted_sentences = sorted(temp_list, key=lambda x: x[0])\n",
    "            for _, sentence in sorted_sentences:\n",
    "                descriptive_sentences.append(sentence)\n",
    "\n",
    "        print(\"There is a unique solution:\")\n",
    "        for sentence in descriptive_sentences:\n",
    "            print(sentence)\n",
    "else:\n",
    "    print(\"There is no solution.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4435a0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
